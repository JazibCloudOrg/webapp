name: Integration Test

on:
  push:
    branches:
      - assignment10

jobs:
  build:
    name: mergejob
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ secrets.PGDATABASE }}
          POSTGRES_USER: ${{ secrets.PGUSER }}
          POSTGRES_PASSWORD: ${{ secrets.PGPASSWORD }}
          POSTGRES_PORT: ${{ secrets.PGPORT }}
          POSTGRES_HOST: ${{ secrets.PGHOST }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: "Create env file"
      run: |
        touch .env
        echo PGDATABASE=${{ secrets.PGDATABASE }} >> .env
        echo PGUSER=${{ secrets.PGUSER }} >> .env
        echo PGPASSWORD=${{ secrets.PGPASSWORD }} >> .env
        echo PGPORT=${{ secrets.PGPORT }} >> .env
        echo PGHOST=${{ secrets.PGHOST }} >> .env
        echo "cat .env"
        cat .env
        echo "ls -a ."
        ls -a .
        echo "ls -a ${{ github.workspace }}"
        ls -a ${{ github.workspace }}

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16.x'

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm test
    
    - name: Compressing the project to the zip file
      run: zip -r webapp.zip .
    
    - name: Configure AWS Credentials for dev
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup Packer
      uses: hashicorp/setup-packer@main
      id: setup
      with:
        version: "latest"

    - name: Run Packer Init
      run: packer init .
    
    - name: Run Packer Format Check
      run: packer fmt -check=true .
    
    - name: Run Packer Validate
      run: packer validate -var-file=packer_variables.pkrvars.hcl .
    
    - name: Run Packer Build
      run: packer build -var-file=packer_variables.pkrvars.hcl .

    - name: Auto Refreshing the auto scaling group
      run: |
        export ami_id="$(aws ec2 describe-images \
          --owners ${{ secrets.AMI_OWNER }} \
          --query 'sort_by(Images, &CreationDate)[-1].ImageId' \
          --output text)"
        
        export launch_template_id="$(aws ec2 describe-launch-templates \
            --query 'sort_by(LaunchTemplates, &CreateTime)[-1].LaunchTemplateId' \
          )"
        
        export launch_template_no_quotes=`sed -e 's/^"//' -e 's/"$//' <<<"$launch_template_id"`

        export auto_scaling_name="$(aws autoscaling describe-auto-scaling-groups \
            --query "AutoScalingGroups[0].AutoScalingGroupName"
          )"
        
        if ! [[ $launch_template_id == null ]] && ! [[ $auto_scaling_name == null ]]
          then

            echo "Launch Template Found"

            aws ec2 create-launch-template-version --launch-template-id $auto_scaling_name \
              --version-description Version2.0Template \
              --source-version 1 \
              --launch-template-data ImageId=$ami_id \
              --region us-east-1

            aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $auto_scaling_name
          else
            echo "Launch Template Not Found"
          fi